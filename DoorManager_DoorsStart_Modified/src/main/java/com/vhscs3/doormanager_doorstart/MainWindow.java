/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.vhscs3.doormanager_doorstart;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Scanner;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author irad_Allen
 */
public class MainWindow extends javax.swing.JFrame {
    
    private HashMap<String, Door>       doors;             //Collection of doors, door name is the key
    private HashMap<String, Schedule>   schedules;         //Collection of schedules, schedule name is the key
    private HashMap<Integer, Badge>     badges;            //Collection of BADGES, employeeID is the key
    private JComponent[]                schedulesGroup;    // Array of enabled/disabled form elements on the schedules tabbed pane
    private JComponent[]                ComboBoxGroup; 
    private JComponent[]                doorsGroup;        // Array of enabled/disabled form elements on the doors tabbed pane
    private Schedule                    currentSchedule;   // Used to get values for editing and adding new schedule 
    private Door                        currentDoor;  
    private ArrayList<DoorTime>         editedTimes;       // Serves as a temp variable for when schedule times are edited 
    private int                         editedTimeRow;
    private JComboBox[]                 doorComboBox;
    private String                      currentFile;    //the save location for the program
    
    public MainWindow() {
        
        currentFile = getCurrentFileLocation();
        
       //DataFactory df = new DataFactory();
       //writeModel(df.getModel());

        DoorManagerModel model = readModel();
        doors = model.doors;
        schedules = model.schedules;
        badges = model.badges;
        
        initComponents();
        
        buildDoorComboBoxGroup();
        
        buildSchedulesGroup();
        buildSchedulesTable();
        buildDoorsGroup();
        buildDoorsTable();
        
        buildComboBoxes();
        // Set the Configuration for buttons (enabled/disabled) for program start
        setGroupEnabled(false, schedulesGroup);
        setGroupEnabled(false, doorsGroup);

        schedules_button_add.setEnabled(true);
        
        doors_panel_elements.setVisible(false);
        doors_table_log.setVisible(true);
        
        schedules_panel_elements.setVisible(false);
                doors_button_add.setEnabled(true);

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        schedules_dialog_times = new javax.swing.JDialog();
        schedules_comboBox_openHour = new javax.swing.JComboBox<>();
        schedules_comboBox_closeMinute = new javax.swing.JComboBox<>();
        schedules_label_timesOpen = new javax.swing.JLabel();
        schedules_label_timesClose = new javax.swing.JLabel();
        schedules_button_timesSave = new javax.swing.JButton();
        schedules_button_timesCancel = new javax.swing.JButton();
        schedules_label_timesInstruction = new javax.swing.JLabel();
        schedules_comboBox_closeHour = new javax.swing.JComboBox<>();
        schedules_comboBox_openMinute = new javax.swing.JComboBox<>();
        doors_buttonGroup_building = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        dashBoard_tabbedPane = new javax.swing.JPanel();
        doors_tabbedPane = new javax.swing.JPanel();
        doors_scrollPane_display = new javax.swing.JScrollPane();
        doors_table_display = new javax.swing.JTable();
        doors_panel_crudButtons = new javax.swing.JPanel();
        doors_button_add = new javax.swing.JButton();
        doors_button_edit = new javax.swing.JButton();
        doors_button_delete = new javax.swing.JButton();
        doors_button_save = new javax.swing.JButton();
        doors_button_cancel = new javax.swing.JButton();
        doors_label_log = new javax.swing.JLabel();
        doors_scrollPane_log = new javax.swing.JScrollPane();
        doors_table_log = new javax.swing.JTable();
        doors_panel_elements = new javax.swing.JPanel();
        doors_label_name = new javax.swing.JLabel();
        doors_textField_name = new javax.swing.JTextField();
        doors_label_status = new javax.swing.JLabel();
        doors_label_statusState = new javax.swing.JLabel();
        doors_label_building = new javax.swing.JLabel();
        doors_radioButton_b1 = new javax.swing.JRadioButton();
        doors_radioButton_b2 = new javax.swing.JRadioButton();
        doors_radioButton_b3 = new javax.swing.JRadioButton();
        doors_label_location = new javax.swing.JLabel();
        doors_button_location = new javax.swing.JButton();
        doors_label_schedules = new javax.swing.JLabel();
        doors_comboBox_monday = new javax.swing.JComboBox<>();
        doors_label_monday = new javax.swing.JLabel();
        doors_comboBox_tuesday = new javax.swing.JComboBox<>();
        doors_label_tuesday = new javax.swing.JLabel();
        doors_comboBox_wednesday = new javax.swing.JComboBox<>();
        doors_label_wednesday = new javax.swing.JLabel();
        doors_comboBox_thursday = new javax.swing.JComboBox<>();
        doors_label_thursday = new javax.swing.JLabel();
        doors_comboBox_friday = new javax.swing.JComboBox<>();
        doors_lable_friday = new javax.swing.JLabel();
        doors_comboBox_saturday = new javax.swing.JComboBox<>();
        doors_label_saturday = new javax.swing.JLabel();
        doors_comboBox_sunday = new javax.swing.JComboBox<>();
        doors_label_sunday = new javax.swing.JLabel();
        schedules_tabbedPanel = new javax.swing.JPanel();
        schedules_scrollPane_schedulesTableDisplay = new javax.swing.JScrollPane();
        schedules_table_display = new javax.swing.JTable();
        schedules_panel_buttons = new javax.swing.JPanel();
        schedules_button_add = new javax.swing.JButton();
        schedules_button_edit = new javax.swing.JButton();
        schedules_button_delete = new javax.swing.JButton();
        schedules_button_save = new javax.swing.JButton();
        schedules_button_cancel = new javax.swing.JButton();
        schedules_panel_elements = new javax.swing.JPanel();
        schedules_textField_name = new javax.swing.JTextField();
        schedules_scrollPane_desctiption = new javax.swing.JScrollPane();
        schedules_textArea_description = new javax.swing.JTextArea();
        schedules_label_name = new javax.swing.JLabel();
        schedules_label_description = new javax.swing.JLabel();
        schedules_label_color = new javax.swing.JLabel();
        schedules_button_color = new javax.swing.JButton();
        schedules_label_colorDisplay = new javax.swing.JLabel();
        schedules_label_times = new javax.swing.JLabel();
        schedules_button_addTime = new javax.swing.JButton();
        schedules_button_editTime = new javax.swing.JButton();
        schedules_button_deleteTime = new javax.swing.JButton();
        schedules_scrollPane_times = new javax.swing.JScrollPane();
        schedules_table_times = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        fileMenu_item_new = new javax.swing.JMenuItem();
        fileMenu_item_open = new javax.swing.JMenuItem();
        fileMenu_item_saveAs = new javax.swing.JMenuItem();
        fileMenu_item_close = new javax.swing.JMenuItem();
        fileMenu_item_loadSampleData = new javax.swing.JMenuItem();
        menu_edit = new javax.swing.JMenu();

        schedules_dialog_times.setMinimumSize(new java.awt.Dimension(400, 300));
        schedules_dialog_times.setModal(true);
        schedules_dialog_times.setResizable(false);

        schedules_comboBox_openHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HOUR", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        schedules_comboBox_closeMinute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MINUTE", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        schedules_label_timesOpen.setText("Open Time");

        schedules_label_timesClose.setText("Close Time");

        schedules_button_timesSave.setText("Save");
        schedules_button_timesSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_timesSaveActionPerformed(evt);
            }
        });

        schedules_button_timesCancel.setText("Cancel");
        schedules_button_timesCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_timesCancelActionPerformed(evt);
            }
        });

        schedules_label_timesInstruction.setText("Select an OPEN and CLOSE time:");

        schedules_comboBox_closeHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HOUR", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        schedules_comboBox_openMinute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MINUTE", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        javax.swing.GroupLayout schedules_dialog_timesLayout = new javax.swing.GroupLayout(schedules_dialog_times.getContentPane());
        schedules_dialog_times.getContentPane().setLayout(schedules_dialog_timesLayout);
        schedules_dialog_timesLayout.setHorizontalGroup(
            schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(schedules_label_timesInstruction)
                    .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                        .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(schedules_label_timesOpen)
                            .addComponent(schedules_label_timesClose))
                        .addGap(30, 30, 30)
                        .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                                .addComponent(schedules_comboBox_openHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(schedules_comboBox_openMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                                .addComponent(schedules_comboBox_closeHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(schedules_comboBox_closeMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                        .addComponent(schedules_button_timesSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(schedules_button_timesCancel)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        schedules_dialog_timesLayout.setVerticalGroup(
            schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_dialog_timesLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(schedules_label_timesInstruction)
                .addGap(26, 26, 26)
                .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_comboBox_openHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schedules_label_timesOpen)
                    .addComponent(schedules_comboBox_openMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_comboBox_closeHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schedules_comboBox_closeMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schedules_label_timesClose))
                .addGap(28, 28, 28)
                .addGroup(schedules_dialog_timesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_button_timesSave)
                    .addComponent(schedules_button_timesCancel))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabbedPane.setBackground(java.awt.SystemColor.control);

        javax.swing.GroupLayout dashBoard_tabbedPaneLayout = new javax.swing.GroupLayout(dashBoard_tabbedPane);
        dashBoard_tabbedPane.setLayout(dashBoard_tabbedPaneLayout);
        dashBoard_tabbedPaneLayout.setHorizontalGroup(
            dashBoard_tabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1237, Short.MAX_VALUE)
        );
        dashBoard_tabbedPaneLayout.setVerticalGroup(
            dashBoard_tabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 774, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Dashboard", dashBoard_tabbedPane);

        doors_table_display.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "status", "Color", "Schedule", "Building"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doors_table_display.setColumnSelectionAllowed(true);
        doors_table_display.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doors_table_displayMouseClicked(evt);
            }
        });
        doors_scrollPane_display.setViewportView(doors_table_display);
        doors_table_display.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        doors_button_add.setText("Add");
        doors_button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doors_button_addActionPerformed(evt);
            }
        });

        doors_button_edit.setText("Edit");
        doors_button_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doors_button_editActionPerformed(evt);
            }
        });

        doors_button_delete.setText("Delete");
        doors_button_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doors_button_deleteActionPerformed(evt);
            }
        });

        doors_button_save.setText("Save");
        doors_button_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doors_button_saveActionPerformed(evt);
            }
        });

        doors_button_cancel.setText("Cancel");
        doors_button_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doors_button_cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout doors_panel_crudButtonsLayout = new javax.swing.GroupLayout(doors_panel_crudButtons);
        doors_panel_crudButtons.setLayout(doors_panel_crudButtonsLayout);
        doors_panel_crudButtonsLayout.setHorizontalGroup(
            doors_panel_crudButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doors_panel_crudButtonsLayout.createSequentialGroup()
                .addComponent(doors_button_add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doors_button_edit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doors_button_delete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doors_button_cancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(doors_button_save)
                .addContainerGap())
        );
        doors_panel_crudButtonsLayout.setVerticalGroup(
            doors_panel_crudButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doors_panel_crudButtonsLayout.createSequentialGroup()
                .addGroup(doors_panel_crudButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_button_add)
                    .addComponent(doors_button_edit)
                    .addComponent(doors_button_delete)
                    .addComponent(doors_button_save)
                    .addComponent(doors_button_cancel))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        doors_label_log.setText("Log");

        doors_table_log.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time Stamp", "Employee"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doors_table_log.setColumnSelectionAllowed(true);
        doors_scrollPane_log.setViewportView(doors_table_log);
        doors_table_log.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        doors_label_name.setText("Door Name");

        doors_label_status.setText("Status");

        doors_label_statusState.setText("OPEN");

        doors_label_building.setText("Building");

        doors_buttonGroup_building.add(doors_radioButton_b1);
        doors_radioButton_b1.setText("1");

        doors_buttonGroup_building.add(doors_radioButton_b2);
        doors_radioButton_b2.setText("2");

        doors_buttonGroup_building.add(doors_radioButton_b3);
        doors_radioButton_b3.setText("3");

        doors_label_location.setText("Location");

        doors_button_location.setText("Select Location");

        doors_label_schedules.setText("Schedules");

        doors_comboBox_monday.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NONE", "Regular", "EOD PIT", "Early Release", "Delayed Start", "Robotics", "Interior Doors" }));

        doors_label_monday.setText("Monday");

        doors_comboBox_tuesday.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NONE", "Regular", "EOD PIT", "Early Release", "Delayed Start", "Robotics", "Interior Doors" }));

        doors_label_tuesday.setText("Tueesday");

        doors_comboBox_wednesday.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NONE", "Regular", "EOD PIT", "Early Release", "Delayed Start", "Robotics", "Interior Doors" }));

        doors_label_wednesday.setText("Wednesday");

        doors_comboBox_thursday.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NONE", "Regular", "EOD PIT", "Early Release", "Delayed Start", "Robotics", "Interior Doors" }));

        doors_label_thursday.setText("Thursday");

        doors_comboBox_friday.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NONE", "Regular", "EOD PIT", "Early Release", "Delayed Start", "Robotics", "Interior Doors" }));

        doors_lable_friday.setText("Friday");

        doors_comboBox_saturday.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NONE", "Regular", "EOD PIT", "Early Release", "Delayed Start", "Robotics", "Interior Doors" }));

        doors_label_saturday.setText("Saturday");

        doors_comboBox_sunday.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NONE", "Regular", "EOD PIT", "Early Release", "Delayed Start", "Robotics", "Interior Doors" }));

        doors_label_sunday.setText("Sunday");

        javax.swing.GroupLayout doors_panel_elementsLayout = new javax.swing.GroupLayout(doors_panel_elements);
        doors_panel_elements.setLayout(doors_panel_elementsLayout);
        doors_panel_elementsLayout.setHorizontalGroup(
            doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(doors_label_status)
                    .addComponent(doors_label_name)
                    .addComponent(doors_label_building)
                    .addComponent(doors_label_location)
                    .addComponent(doors_label_schedules))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(doors_textField_name)
                        .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                            .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(doors_label_statusState)
                                .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                                    .addComponent(doors_radioButton_b1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(doors_radioButton_b2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(doors_radioButton_b3))
                                .addComponent(doors_button_location))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                                .addComponent(doors_comboBox_wednesday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(doors_label_wednesday))
                            .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                                .addComponent(doors_comboBox_monday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(doors_label_monday))
                            .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                                .addComponent(doors_comboBox_tuesday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(doors_label_tuesday))
                            .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                                .addComponent(doors_comboBox_thursday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(doors_label_thursday))
                            .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                                .addComponent(doors_comboBox_friday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(doors_lable_friday))
                            .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                                .addComponent(doors_comboBox_saturday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(doors_label_saturday))
                            .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                                .addComponent(doors_comboBox_sunday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(doors_label_sunday)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );
        doors_panel_elementsLayout.setVerticalGroup(
            doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doors_panel_elementsLayout.createSequentialGroup()
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_label_name)
                    .addComponent(doors_textField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_label_status)
                    .addComponent(doors_label_statusState))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_label_building)
                    .addComponent(doors_radioButton_b1)
                    .addComponent(doors_radioButton_b2)
                    .addComponent(doors_radioButton_b3))
                .addGap(10, 10, 10)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_label_location)
                    .addComponent(doors_button_location))
                .addGap(18, 18, 18)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_label_schedules)
                    .addComponent(doors_comboBox_monday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doors_label_monday))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_comboBox_tuesday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doors_label_tuesday))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_comboBox_wednesday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doors_label_wednesday))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_comboBox_thursday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doors_label_thursday))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_comboBox_friday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doors_lable_friday))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_comboBox_saturday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doors_label_saturday))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doors_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doors_comboBox_sunday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doors_label_sunday))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout doors_tabbedPaneLayout = new javax.swing.GroupLayout(doors_tabbedPane);
        doors_tabbedPane.setLayout(doors_tabbedPaneLayout);
        doors_tabbedPaneLayout.setHorizontalGroup(
            doors_tabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doors_tabbedPaneLayout.createSequentialGroup()
                .addComponent(doors_scrollPane_display, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(doors_tabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(doors_tabbedPaneLayout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(doors_label_log)
                        .addContainerGap())
                    .addGroup(doors_tabbedPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(doors_tabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(doors_panel_elements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(doors_panel_crudButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doors_tabbedPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(doors_scrollPane_log, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );
        doors_tabbedPaneLayout.setVerticalGroup(
            doors_tabbedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(doors_scrollPane_display, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
            .addGroup(doors_tabbedPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(doors_panel_crudButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(doors_panel_elements, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(doors_label_log)
                .addGap(8, 8, 8)
                .addComponent(doors_scrollPane_log, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Doors", doors_tabbedPane);

        schedules_table_display.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Description", "Color", "Open Times"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        schedules_table_display.setColumnSelectionAllowed(true);
        schedules_table_display.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                schedules_table_displayMouseClicked(evt);
            }
        });
        schedules_scrollPane_schedulesTableDisplay.setViewportView(schedules_table_display);
        schedules_table_display.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        schedules_button_add.setText("Add");
        schedules_button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_addActionPerformed(evt);
            }
        });

        schedules_button_edit.setText("Edit");
        schedules_button_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_editActionPerformed(evt);
            }
        });

        schedules_button_delete.setText("Delete");
        schedules_button_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_deleteActionPerformed(evt);
            }
        });

        schedules_button_save.setText("Save");
        schedules_button_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_saveActionPerformed(evt);
            }
        });

        schedules_button_cancel.setText("Cancel");
        schedules_button_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout schedules_panel_buttonsLayout = new javax.swing.GroupLayout(schedules_panel_buttons);
        schedules_panel_buttons.setLayout(schedules_panel_buttonsLayout);
        schedules_panel_buttonsLayout.setHorizontalGroup(
            schedules_panel_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_panel_buttonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(schedules_button_add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(schedules_button_edit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(schedules_button_delete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(schedules_button_cancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(schedules_button_save)
                .addGap(14, 14, 14))
        );
        schedules_panel_buttonsLayout.setVerticalGroup(
            schedules_panel_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_panel_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(schedules_button_add)
                .addComponent(schedules_button_edit)
                .addComponent(schedules_button_delete)
                .addComponent(schedules_button_save)
                .addComponent(schedules_button_cancel))
        );

        schedules_textArea_description.setColumns(20);
        schedules_textArea_description.setRows(5);
        schedules_scrollPane_desctiption.setViewportView(schedules_textArea_description);

        schedules_label_name.setText("Name");

        schedules_label_description.setText("Desctiption");

        schedules_label_color.setText("Color");

        schedules_button_color.setText("Choose Color");
        schedules_button_color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_colorActionPerformed(evt);
            }
        });

        schedules_label_times.setText("Times");

        schedules_button_addTime.setText("Add Time");
        schedules_button_addTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_addTimeActionPerformed(evt);
            }
        });

        schedules_button_editTime.setText("Edit Time");
        schedules_button_editTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_editTimeActionPerformed(evt);
            }
        });

        schedules_button_deleteTime.setText("Delete Time");
        schedules_button_deleteTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedules_button_deleteTimeActionPerformed(evt);
            }
        });

        schedules_table_times.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Open", "Close"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        schedules_table_times.setColumnSelectionAllowed(true);
        schedules_table_times.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                schedules_table_timesMouseClicked(evt);
            }
        });
        schedules_scrollPane_times.setViewportView(schedules_table_times);
        schedules_table_times.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel1.setBackground(java.awt.SystemColor.control);
        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout schedules_panel_elementsLayout = new javax.swing.GroupLayout(schedules_panel_elements);
        schedules_panel_elements.setLayout(schedules_panel_elementsLayout);
        schedules_panel_elementsLayout.setHorizontalGroup(
            schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                        .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(schedules_label_times)
                            .addComponent(schedules_label_color)
                            .addComponent(schedules_label_name)
                            .addComponent(schedules_label_description))
                        .addGap(18, 18, 18)
                        .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(schedules_textField_name)
                            .addComponent(schedules_scrollPane_desctiption)
                            .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                                        .addComponent(schedules_button_color)
                                        .addGap(18, 18, 18)
                                        .addComponent(schedules_label_colorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                                        .addComponent(schedules_button_addTime)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(schedules_button_editTime)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(schedules_button_deleteTime)))
                                .addGap(0, 61, Short.MAX_VALUE))
                            .addComponent(schedules_scrollPane_times, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        schedules_panel_elementsLayout.setVerticalGroup(
            schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_textField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schedules_label_name))
                .addGap(18, 18, 18)
                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(schedules_panel_elementsLayout.createSequentialGroup()
                        .addComponent(schedules_label_description)
                        .addGap(43, 43, 43)
                        .addComponent(jLabel1))
                    .addComponent(schedules_scrollPane_desctiption, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_button_color)
                    .addComponent(schedules_label_color)
                    .addComponent(schedules_label_colorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(schedules_panel_elementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schedules_label_times)
                    .addComponent(schedules_button_addTime)
                    .addComponent(schedules_button_editTime)
                    .addComponent(schedules_button_deleteTime))
                .addGap(18, 18, 18)
                .addComponent(schedules_scrollPane_times, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout schedules_tabbedPanelLayout = new javax.swing.GroupLayout(schedules_tabbedPanel);
        schedules_tabbedPanel.setLayout(schedules_tabbedPanelLayout);
        schedules_tabbedPanelLayout.setHorizontalGroup(
            schedules_tabbedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedules_tabbedPanelLayout.createSequentialGroup()
                .addComponent(schedules_scrollPane_schedulesTableDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(schedules_tabbedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(schedules_tabbedPanelLayout.createSequentialGroup()
                        .addComponent(schedules_panel_buttons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(schedules_panel_elements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        schedules_tabbedPanelLayout.setVerticalGroup(
            schedules_tabbedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(schedules_scrollPane_schedulesTableDisplay)
            .addGroup(schedules_tabbedPanelLayout.createSequentialGroup()
                .addComponent(schedules_panel_buttons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(schedules_panel_elements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Schedules", schedules_tabbedPanel);

        menu_file.setText("File");

        fileMenu_item_new.setText("New");
        fileMenu_item_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenu_item_newActionPerformed(evt);
            }
        });
        menu_file.add(fileMenu_item_new);

        fileMenu_item_open.setText("Open");
        fileMenu_item_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenu_item_openActionPerformed(evt);
            }
        });
        menu_file.add(fileMenu_item_open);

        fileMenu_item_saveAs.setText("Save As");
        fileMenu_item_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenu_item_saveAsActionPerformed(evt);
            }
        });
        menu_file.add(fileMenu_item_saveAs);

        fileMenu_item_close.setText("Close");
        fileMenu_item_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenu_item_closeActionPerformed(evt);
            }
        });
        menu_file.add(fileMenu_item_close);

        fileMenu_item_loadSampleData.setText("Load Sample Data");
        fileMenu_item_loadSampleData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenu_item_loadSampleDataActionPerformed(evt);
            }
        });
        menu_file.add(fileMenu_item_loadSampleData);

        menuBar.add(menu_file);

        menu_edit.setText("Edit");
        menuBar.add(menu_edit);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void schedules_button_colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_colorActionPerformed
        
        Color color = JColorChooser.showDialog(MainWindow.this,
                                               "Choose Schedule Color", 
                                               schedules_label_colorDisplay.getBackground());
        
        if (color != null) {
            schedules_label_colorDisplay.setBackground(color);
            schedules_label_colorDisplay.setOpaque(true);
        }
               
    }//GEN-LAST:event_schedules_button_colorActionPerformed

    private void schedules_table_displayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_schedules_table_displayMouseClicked
        // Detect the schedule that is selected, use column[0] to get the name,
        // then uses the name to get the appropriate schedule from the 
        // schedules HashMap.  Uses the schedule to populate the display fields.
        
        if (schedules_button_cancel.isEnabled()) {
            return;
        }
        
        int row = schedules_table_display.getSelectedRow();
        
        String name  = (String) schedules_table_display.getValueAt(row, 0);
        if(name.equals("NONE"))
        {
           schedules_button_edit.setEnabled(false);
           schedules_button_delete.setEnabled(false);
           return; 

        }
        
        Schedule schedule = schedules.get(name);
        
        currentSchedule = schedule;
        
        schedules_textField_name.setText(name);
        schedules_textArea_description.setText(schedule.getDescription());
        schedules_label_colorDisplay.setBackground(schedule.getColor());
        schedules_label_colorDisplay.setOpaque(true);
        
        buildTimesTable(schedule.getTimes());
        
        
        setGroupEnabled(false, schedulesGroup);
        schedules_button_add.setEnabled(true);
        schedules_button_edit.setEnabled(true);
        schedules_button_delete.setEnabled(true);

    }//GEN-LAST:event_schedules_table_displayMouseClicked

    private void schedules_button_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_deleteActionPerformed

        
        // Step 1 - Get the selected schedule name from the talbe
        int row = schedules_table_display.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)schedules_table_display.getModel();
        String name = (String) model.getValueAt(row,0);
        
        // Confirm schedule deletion.  If JOptionPane returns false, return out of the method.
        int confirmation = JOptionPane.showConfirmDialog(null, "CONFIRM: Delete " + name + " schedule?");
        
        if (confirmation != JOptionPane.YES_OPTION) {
            return;
        }

        // Step 2 - Delete the schedule from the schedules HashMap
        schedules.remove(name);
        
        // Step 3 - Rebuild the schedules display table
        buildSchedulesTable();
        
        // Step 4 - Disable the thingys
        setGroupEnabled(false, schedulesGroup);
        schedules_button_add.setEnabled(true);

        // Step 5 - Clear the fields
        resetScheduleFields();
        
        currentSchedule = null;
        
        buildComboBoxes();
        writeModel(new DoorManagerModel(doors, schedules, badges));
           
    }//GEN-LAST:event_schedules_button_deleteActionPerformed

    private void schedules_button_addTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_addTimeActionPerformed
        editedTimeRow = -1;
        clearTimesDialogFields();
        schedules_dialog_times.setVisible(true);
        schedules_button_addTime.setEnabled(true);
        schedules_button_deleteTime.setEnabled(true);
        schedules_button_editTime.setEnabled(true);
              
    }//GEN-LAST:event_schedules_button_addTimeActionPerformed

    private void schedules_button_timesCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_timesCancelActionPerformed
        // TODO add your handling code here:
        schedules_dialog_times.setVisible(false);
        editedTimeRow = -1;
        clearTimesDialogFields();

    }//GEN-LAST:event_schedules_button_timesCancelActionPerformed

    private void schedules_button_timesSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_timesSaveActionPerformed
        
        //Step 1 - Verify that all fields are selected
        if (schedules_comboBox_closeHour.getSelectedIndex()     == 0 ||
            schedules_comboBox_openHour.getSelectedIndex()      == 0 ||
            schedules_comboBox_closeMinute.getSelectedIndex()   == 0 ||
            schedules_comboBox_openMinute.getSelectedIndex()    == 0){
            
            JOptionPane.showMessageDialog(MainWindow.this, "ERROR: Please confirm that all fields are selected");
            return;
        }
        
        // Step 2 - Verify that close time is after open time
        int openHour    = Integer.parseInt((String)schedules_comboBox_openHour.getSelectedItem());
        int openMinute  = Integer.parseInt((String)schedules_comboBox_openMinute.getSelectedItem());
        int closeHour   = Integer.parseInt((String)schedules_comboBox_closeHour.getSelectedItem());
        int closeMinute = Integer.parseInt((String)schedules_comboBox_closeMinute.getSelectedItem());
        
        if (closeHour < openHour || (closeHour == openHour && closeMinute < openMinute)) {
            JOptionPane.showMessageDialog(MainWindow.this, "ERROR: Close time must be greater than or equal to open time");
            return;
        } 
        
        // Step 3 - Create a DoorTime
        GregorianCalendar openTime  = new GregorianCalendar(2022, 9, 4, openHour, openMinute);
        GregorianCalendar closeTime = new GregorianCalendar(2022, 9, 4, closeHour, closeMinute);
        DoorTime time = new DoorTime(openTime, closeTime);
        
        if (editedTimeRow == -1) { 
            editedTimes.add(time);
        } else {
            editedTimes.set(editedTimeRow, time);
        }
        
        // Step 6 - rebuild the times table to reflect the changes
        buildTimesTable(editedTimes);

        // Close the Dialog window and set 
        schedules_dialog_times.setVisible(false);
        
        editedTimeRow = -1;
        
    }//GEN-LAST:event_schedules_button_timesSaveActionPerformed

    private void schedules_button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_addActionPerformed
        
        resetScheduleFields();   

        setGroupEnabled(true, schedulesGroup);
        schedules_button_add.setEnabled(false);
        schedules_button_edit.setEnabled(false);
        schedules_button_delete.setEnabled(false);
        schedules_button_editTime.setEnabled(false);
        schedules_button_deleteTime.setEnabled(false);
        
        schedules_panel_elements.setVisible(true);
        
        currentSchedule = null;
        editedTimes = new ArrayList<>();
        
    }//GEN-LAST:event_schedules_button_addActionPerformed

    private void schedules_button_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_saveActionPerformed
        
        // Get values from all the schedule form fields
        String name = schedules_textField_name.getText();
        String description = schedules_textArea_description.getText();
        Color color = schedules_label_colorDisplay.getBackground();

        if (name.isBlank() || description.isBlank() || color.equals(new Color(216, 216, 216)) || editedTimes.isEmpty() ) {
            JOptionPane.showMessageDialog(MainWindow.this, "ERROR: All schedules fields must have data.");
            return;
        }
        
        Schedule schedule = new Schedule(name, description, color, editedTimes);
        
        // Determine edit/add function and duplicate names
        // Edit button enabled, check to see if name changed.  If so, then delete the onld schedule, and add new.
        // if name the same, replace the schedule n the map.
        if (currentSchedule != null) {
            
            if (name.equals(currentSchedule.getName())) {
                schedules.put(name, schedule);
            } else {
                schedules.remove(schedules.remove(currentSchedule.getName()));
            }    
            
        } else {
        
        // If schedule is null, then add was selected.  Before adding, make sure
        // there is not already a schedule in the map with the same name.
        // If there is, alert and ask user to choose a diferent name.
            
            if (schedules.containsKey(name)) {
                
                JOptionPane.showMessageDialog(MainWindow.this, "ERROR: Schedule exists with the same name. Please choose another name");
                return;
                
            } 
        
        }
        
        schedules.put(name, schedule);
        buildSchedulesTable();
        
        resetScheduleFields();
        setGroupEnabled(false, schedulesGroup);
        schedules_button_add.setEnabled(true);
        schedules_panel_elements.setVisible(false);
        
        buildComboBoxes();
        writeModel(new DoorManagerModel(doors, schedules, badges));
        
    }//GEN-LAST:event_schedules_button_saveActionPerformed

    private void schedules_button_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_editActionPerformed
        
        setGroupEnabled(true, schedulesGroup);
        schedules_button_add.setEnabled(false);
        schedules_button_edit.setEnabled(false);
        schedules_button_delete.setEnabled(false);
        schedules_button_editTime.setEnabled(false);
        schedules_button_deleteTime.setEnabled(false); 
        
        schedules_panel_elements.setVisible(true);
        
        editedTimes = (ArrayList<DoorTime>)currentSchedule.getTimes().clone();
        
    }//GEN-LAST:event_schedules_button_editActionPerformed

    private void schedules_button_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_cancelActionPerformed
        
        resetScheduleFields();
        setGroupEnabled(false, schedulesGroup);
        schedules_panel_elements.setVisible(false);
        schedules_button_add.setEnabled(true);
        
    }//GEN-LAST:event_schedules_button_cancelActionPerformed

    private void schedules_table_timesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_schedules_table_timesMouseClicked
        //Finds the selected time, and enables the EditTime button, DeleteTime
        // button, and CancelTimeb button
        
        schedules_table_times.setEnabled(true);
        schedules_button_editTime.setEnabled(true);
        schedules_button_deleteTime.setEnabled(true);

    }//GEN-LAST:event_schedules_table_timesMouseClicked

    private void schedules_button_editTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_editTimeActionPerformed
        // TODO add your handling code here:
        
        editedTimeRow = schedules_table_times.getSelectedRow();
        
        if (editedTimeRow == -1) {
            return;
        }
                
        schedules_button_editTime.setEnabled(true);
        schedules_button_addTime.setEnabled(false);
        schedules_button_deleteTime.setEnabled(false);
        
        DoorTime time = editedTimes.get(editedTimeRow);
        
        int oh =time.getOpen().get(Calendar.HOUR_OF_DAY);
        int om = time.getOpen().get(Calendar.MINUTE);
        int ch = time.getClose().get(Calendar.HOUR_OF_DAY);
        int cm =time.getClose().get(Calendar.MINUTE);
        
        schedules_comboBox_openHour.setSelectedIndex(oh+1);
        schedules_comboBox_openMinute.setSelectedIndex(om+1);
        schedules_comboBox_closeHour.setSelectedIndex(ch+1);
        schedules_comboBox_closeMinute.setSelectedIndex(cm+1);
         
        schedules_dialog_times.setVisible(true);        
         
    }//GEN-LAST:event_schedules_button_editTimeActionPerformed

    private void schedules_button_deleteTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedules_button_deleteTimeActionPerformed
        // TODO add your handling code here:
        
        int row = schedules_table_times.getSelectedRow();
        
        int confirm = JOptionPane.showConfirmDialog(MainWindow.this, "Confirm time deletion.");
        
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        editedTimes.remove(row);
        buildTimesTable(editedTimes);
        
        schedules_button_addTime.setEnabled(true);
        schedules_button_editTime.setEnabled(false);
        schedules_button_deleteTime.setEnabled(false);
               
    }//GEN-LAST:event_schedules_button_deleteTimeActionPerformed

    private void doors_table_displayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doors_table_displayMouseClicked
                if (doors_button_cancel.isEnabled()) {
            return;
        }
        resetDoorFields();
        int row = doors_table_display.getSelectedRow();
        
        String name  = (String) doors_table_display.getValueAt(row, 0);
        Door door = doors.get(name);
        
        
        
        currentDoor = door;
        
        doors_textField_name.setText(name);
        if(door.isStatus()){
            doors_label_statusState.setText("OPEN");
        }
        else{
            doors_label_statusState.setText("CLOSE");
 
        }
            
        int buildingNum = Integer.parseInt((String)doors_table_display.getValueAt(row, 4));
        if(buildingNum == 1)
        {
            doors_radioButton_b1.setSelected(true);
        }
        else if(buildingNum == 2)
        {
            doors_radioButton_b2.setSelected(true);
        }
        else if(buildingNum == 3)
        {
            doors_radioButton_b3.setSelected(true);
        } 
        Schedule[] WeeklySchedules = door.getWeeklySchedules();
        
        int day = 0;
        for(JComboBox ComboBox: doorComboBox){
            
            
            String NameToday = door.getScheduleOfDay(day).getName();
            
            if(!(ComboBox.getSelectedItem().equals(NameToday))){
                for(int today = 0; today < ComboBox.getItemCount(); today++) {
                         if(ComboBox.getItemAt(today).equals(NameToday)){
                             ComboBox.setSelectedIndex(today);
                            
                    }
                }
                 day++;
            }
            else{
                day++;
            }
        }
        buildLogsTable(door.getLog());
        
        setGroupEnabled(false, doorsGroup);
        doors_panel_elements.setVisible(false);
        doors_button_add.setEnabled(true);
        doors_button_edit.setEnabled(true);
        doors_button_delete.setEnabled(true);
        doors_table_log.setEnabled(true);
    }//GEN-LAST:event_doors_table_displayMouseClicked

    private void doors_button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doors_button_addActionPerformed
        // TODO add your handling code here:
        resetDoorFields();   
        int row = doors_table_display.getSelectedRow();
        
        doors_panel_elements.setVisible(true);

        setGroupEnabled(true, doorsGroup);
        
        doors_button_add.setEnabled(false);
        doors_button_edit.setEnabled(false);
        doors_button_delete.setEnabled(false);
        
        doors_panel_elements.setVisible(true);
        
        currentDoor = null;
        
        
    }//GEN-LAST:event_doors_button_addActionPerformed

    private void doors_button_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doors_button_saveActionPerformed
               // Get values from all the schedule form fields
        doors_panel_elements.setVisible(false);
        String name = doors_textField_name.getText();
        TreeSet<LogEntry> log = new TreeSet<LogEntry>();
        
        Location location = new Location(0,0);
        Schedule[] weeklySchedules = new Schedule[7];
        for(int i = 0; i<7; i++ ){
            
            weeklySchedules[i] = schedules.get(doorComboBox[i].getSelectedItem());
        } 
            
        if (name.isBlank()) {
            JOptionPane.showMessageDialog(MainWindow.this, "ERROR: All doors fields must have data.");
            return;
        }
            
        String buildingNum = null;
        if(doors_radioButton_b1.isSelected())
        {
            buildingNum = ""+1;
        }
        else if(doors_radioButton_b2.isSelected())
        {
            buildingNum = ""+2;
        }
        else if(doors_radioButton_b3.isSelected())
        {
            buildingNum = ""+3;
        }
        boolean status = false;
        
        if (name.isBlank() ||(!doors_radioButton_b1.isSelected() && !doors_radioButton_b2.isSelected() && !doors_radioButton_b3.isSelected() )) {
            JOptionPane.showMessageDialog(MainWindow.this, "ERROR: All doors fields must have data.");
            return;
        }
        Door door = new Door(name, location, log,weeklySchedules, status, buildingNum);

        if(door.isStatus()){
            doors_label_statusState.setText("OPEN");
            status = door.isStatus();
        }
        else{
            doors_label_statusState.setText("CLOSE");
            status = door.isStatus();
        }
        
        // Determine edit/add function and duplicate names
        // Edit button enabled, check to see if name changed.  If so, then delete the onld schedule, and add new.
        // if name the same, replace the schedule n the map.
        
        if (currentDoor != null) {
            if(currentDoor.getLog().size()>0){
               log = (TreeSet<LogEntry>) currentDoor.getLog().clone();
               door.setLog(log);
            }
            
            if (name.equals(currentDoor.getName())) {
                doors.put(name, door);
            } else {
                doors.remove(currentDoor.getName());
            }    
            
        } else {
        
        // If schedule is null, then add was selected.  Before adding, make sure
        // there is not already a schedule in the map with the same name.
        // If there is, alert and ask user to choose a diferent name.
            
            if (doors.containsKey(name)) {
                
                JOptionPane.showMessageDialog(MainWindow.this, "ERROR: door exists with the same name. Please choose another name");
                return;
                
            } 
        
        }
        
        
        doors.put(name, door);
        buildDoorsTable();

        resetDoorFields();
        setGroupEnabled(false, doorsGroup);
        doors_button_add.setEnabled(true);
        doors_panel_elements.setVisible(false);
     
        writeModel(new DoorManagerModel(doors, schedules, badges));
                                        
    }//GEN-LAST:event_doors_button_saveActionPerformed

    private void doors_button_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doors_button_deleteActionPerformed
         // Step 1 - Get the selected schedule name from the talbe
        int row = doors_table_display.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)doors_table_display.getModel();
        String name = (String) model.getValueAt(row,0);
        
        // Confirm schedule deletion.  If JOptionPane returns false, return out of the method.
        int confirmation = JOptionPane.showConfirmDialog(null, "CONFIRM: Delete this door: " + name + "?");
        
        if (confirmation != JOptionPane.YES_OPTION) {
            return;
        }

        // Step 2 - Delete the schedule from the schedules HashMap
        doors.remove(name);
        
        // Step 3 - Rebuild the schedules display table
        buildDoorsTable();

        // Step 5 - Clear the fields
        resetDoorFields();
        
        currentDoor = null;
        
        doors_button_add.setEnabled(true);
        doors_button_delete.setEnabled(false);
        doors_button_edit.setEnabled(false);
        doors_button_cancel.setEnabled(false);
        doors_button_save.setEnabled(false);
    }//GEN-LAST:event_doors_button_deleteActionPerformed

    private void doors_button_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doors_button_editActionPerformed
           
        if (doors_textField_name.getText().isEmpty()) {
            return;
        }
        
        setGroupEnabled(true, doorComboBox);
        doors_textField_name.setEnabled(true);
        doors_radioButton_b1.setEnabled(true);
        doors_radioButton_b2.setEnabled(true);              //BUG: editing when boxes are empty
        doors_radioButton_b3.setEnabled(true);
        doors_button_location.setEnabled(true);

        doors_button_add.setEnabled(false);
        doors_button_delete.setEnabled(false);
        doors_button_edit.setEnabled(false);
        doors_button_cancel.setEnabled(true);
        doors_button_save.setEnabled(true);
        
        doors_panel_elements.setVisible(true);
    }//GEN-LAST:event_doors_button_editActionPerformed

    private void doors_button_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doors_button_cancelActionPerformed
        resetDoorFields();
        doors_panel_elements.setVisible(false);
        setGroupEnabled(false, doorComboBox);
        doors_textField_name.setEnabled(false);
        doors_radioButton_b1.setEnabled(false);
        doors_radioButton_b2.setEnabled(false);
        doors_radioButton_b3.setEnabled(false);
        doors_button_location.setEnabled(false);
        
        doors_button_add.setEnabled(true);
        doors_button_delete.setEnabled(false);
        doors_button_edit.setEnabled(false);
        doors_button_cancel.setEnabled(false);
        doors_button_save.setEnabled(false);
    }//GEN-LAST:event_doors_button_cancelActionPerformed

    private void fileMenu_item_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenu_item_newActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenu_item_newActionPerformed

    private void fileMenu_item_saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenu_item_saveAsActionPerformed
        //use a JFileChooser to select a sae location or name for the new file
        //the file will be assigned to the CurrentFile instance variable and used to save the file.
        //the file name will also be writtten to the prefferences.txt file so that it will open
        //when ht program is launched.
        
        JFileChooser jfc = new JFileChooser();
        if(jfc.showSaveDialog(MainWindow.this) == JFileChooser.APPROVE_OPTION){
            currentFile = jfc.getSelectedFile().getAbsolutePath();
            writeModel(new DoorManagerModel(doors, schedules, badges));
            writeCurrentFileLocaitonToPreferences();
        }
    }//GEN-LAST:event_fileMenu_item_saveAsActionPerformed

    private void fileMenu_item_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenu_item_openActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenu_item_openActionPerformed

    private void fileMenu_item_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenu_item_closeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenu_item_closeActionPerformed

    private void fileMenu_item_loadSampleDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenu_item_loadSampleDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenu_item_loadSampleDataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dashBoard_tabbedPane;
    private javax.swing.ButtonGroup doors_buttonGroup_building;
    private javax.swing.JButton doors_button_add;
    private javax.swing.JButton doors_button_cancel;
    private javax.swing.JButton doors_button_delete;
    private javax.swing.JButton doors_button_edit;
    private javax.swing.JButton doors_button_location;
    private javax.swing.JButton doors_button_save;
    private javax.swing.JComboBox<String> doors_comboBox_friday;
    private javax.swing.JComboBox<String> doors_comboBox_monday;
    private javax.swing.JComboBox<String> doors_comboBox_saturday;
    private javax.swing.JComboBox<String> doors_comboBox_sunday;
    private javax.swing.JComboBox<String> doors_comboBox_thursday;
    private javax.swing.JComboBox<String> doors_comboBox_tuesday;
    private javax.swing.JComboBox<String> doors_comboBox_wednesday;
    private javax.swing.JLabel doors_label_building;
    private javax.swing.JLabel doors_label_location;
    private javax.swing.JLabel doors_label_log;
    private javax.swing.JLabel doors_label_monday;
    private javax.swing.JLabel doors_label_name;
    private javax.swing.JLabel doors_label_saturday;
    private javax.swing.JLabel doors_label_schedules;
    private javax.swing.JLabel doors_label_status;
    private javax.swing.JLabel doors_label_statusState;
    private javax.swing.JLabel doors_label_sunday;
    private javax.swing.JLabel doors_label_thursday;
    private javax.swing.JLabel doors_label_tuesday;
    private javax.swing.JLabel doors_label_wednesday;
    private javax.swing.JLabel doors_lable_friday;
    private javax.swing.JPanel doors_panel_crudButtons;
    private javax.swing.JPanel doors_panel_elements;
    private javax.swing.JRadioButton doors_radioButton_b1;
    private javax.swing.JRadioButton doors_radioButton_b2;
    private javax.swing.JRadioButton doors_radioButton_b3;
    private javax.swing.JScrollPane doors_scrollPane_display;
    private javax.swing.JScrollPane doors_scrollPane_log;
    private javax.swing.JPanel doors_tabbedPane;
    private javax.swing.JTable doors_table_display;
    private javax.swing.JTable doors_table_log;
    private javax.swing.JTextField doors_textField_name;
    private javax.swing.JMenuItem fileMenu_item_close;
    private javax.swing.JMenuItem fileMenu_item_loadSampleData;
    private javax.swing.JMenuItem fileMenu_item_new;
    private javax.swing.JMenuItem fileMenu_item_open;
    private javax.swing.JMenuItem fileMenu_item_saveAs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menu_edit;
    private javax.swing.JMenu menu_file;
    private javax.swing.JButton schedules_button_add;
    private javax.swing.JButton schedules_button_addTime;
    private javax.swing.JButton schedules_button_cancel;
    private javax.swing.JButton schedules_button_color;
    private javax.swing.JButton schedules_button_delete;
    private javax.swing.JButton schedules_button_deleteTime;
    private javax.swing.JButton schedules_button_edit;
    private javax.swing.JButton schedules_button_editTime;
    private javax.swing.JButton schedules_button_save;
    private javax.swing.JButton schedules_button_timesCancel;
    private javax.swing.JButton schedules_button_timesSave;
    private javax.swing.JComboBox<String> schedules_comboBox_closeHour;
    private javax.swing.JComboBox<String> schedules_comboBox_closeMinute;
    private javax.swing.JComboBox<String> schedules_comboBox_openHour;
    private javax.swing.JComboBox<String> schedules_comboBox_openMinute;
    private javax.swing.JDialog schedules_dialog_times;
    private javax.swing.JLabel schedules_label_color;
    private javax.swing.JLabel schedules_label_colorDisplay;
    private javax.swing.JLabel schedules_label_description;
    private javax.swing.JLabel schedules_label_name;
    private javax.swing.JLabel schedules_label_times;
    private javax.swing.JLabel schedules_label_timesClose;
    private javax.swing.JLabel schedules_label_timesInstruction;
    private javax.swing.JLabel schedules_label_timesOpen;
    private javax.swing.JPanel schedules_panel_buttons;
    private javax.swing.JPanel schedules_panel_elements;
    private javax.swing.JScrollPane schedules_scrollPane_desctiption;
    private javax.swing.JScrollPane schedules_scrollPane_schedulesTableDisplay;
    private javax.swing.JScrollPane schedules_scrollPane_times;
    private javax.swing.JPanel schedules_tabbedPanel;
    private javax.swing.JTable schedules_table_display;
    private javax.swing.JTable schedules_table_times;
    private javax.swing.JTextArea schedules_textArea_description;
    private javax.swing.JTextField schedules_textField_name;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables


    private void writeModel(DoorManagerModel model) {
       // Writes the model as an object to disk
       
        try {
            
            FileOutputStream    fos = new FileOutputStream(new File(currentFile));
            ObjectOutputStream  oos = new ObjectOutputStream(fos);
            
            oos.writeObject(model);
            oos.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
    }

    private DoorManagerModel readModel() {
        
        DoorManagerModel dmm = null;
        
        try {
            
            FileInputStream     fis = new FileInputStream(new File(currentFile));
            ObjectInputStream   ois = new ObjectInputStream(fis);
            
            dmm = (DoorManagerModel)ois.readObject();
            fis.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return dmm;
    }

    private void buildSchedulesTable() {
        
        Object[][] data = new Object[schedules.size()][4];
        String[] columnHeaders = {"Name", "Descritpion", "Color", "Open Times"};
     
        // Get the Tables Cell renderer to change the background color of the 
        // schedule field to match the color
        
        int row = 0;
        
        for (String key : schedules.keySet()) {
            Schedule schedule = schedules.get(key);
            
            data[row][0] = schedule.getName();
            data[row][1] = schedule.getDescription();
            
            Color color  = schedule.getColor();
            data[row][2] = String.format("%d, %d, %d",color.getRed(), color.getGreen(), color.getBlue());
            data[row][3] = schedule.getTimes();
            
            row++;
            
        }
        
        DefaultTableModel dfm = (DefaultTableModel)schedules_table_display.getModel();
        dfm.setDataVector(data, columnHeaders);
        
        CellColorRenderer cellRenderer = new CellColorRenderer();
        schedules_table_display.setDefaultRenderer(Object.class, cellRenderer);
        


    }
    
    private void buildTimesTable(ArrayList<DoorTime> times) {

        if (times == null || times.size() == 0) {
            return;
        }
        
        Object[][] data = new Object[times.size()][2];
        String[] columnHeaders = {"Open Time", "Close Time"};
     
        int row = 0;
        
        for (DoorTime time : times) {
            
            String[] timesSplit = time.toString().split(", ");
            
            data[row][0] = timesSplit[0];
            data[row][1] = timesSplit[1];
            
            row++;
            
        }
        
        DefaultTableModel dfm = (DefaultTableModel)schedules_table_times.getModel();
        dfm.setDataVector(data, columnHeaders);
    
    }

    private void buildSchedulesGroup() {
    
        schedulesGroup = new JComponent[12];
        
        schedulesGroup[0] = schedules_table_times;
        schedulesGroup[1] = schedules_button_edit;
        schedulesGroup[2] = schedules_button_delete;
        schedulesGroup[3] = schedules_button_save;        
        schedulesGroup[4] = schedules_textField_name;
        schedulesGroup[5] = schedules_textArea_description;        
        schedulesGroup[6] = schedules_button_color;       
        schedulesGroup[7] = schedules_button_addTime;
        schedulesGroup[8] = schedules_button_editTime;
        schedulesGroup[9] = schedules_button_deleteTime; 
        schedulesGroup[10] = schedules_button_cancel;
        schedulesGroup[11] = schedules_button_add;
        
    }

    private void buildDoorsGroup() {
                doorsGroup = new JComponent[17];

        doorsGroup[0] = doors_button_add;
        doorsGroup[1] = doors_button_edit;
        doorsGroup[2] = doors_button_delete;
        doorsGroup[3] = doors_button_save;
        doorsGroup[4] = doors_textField_name;
        doorsGroup[5] = doors_button_cancel;
        doorsGroup[6] = doors_radioButton_b1;
        doorsGroup[7] = doors_radioButton_b2;
        doorsGroup[8] = doors_radioButton_b3;
        doorsGroup[9] = doors_button_location;
        doorsGroup[10] = doors_comboBox_monday;
        doorsGroup[11] = doors_comboBox_tuesday;
        doorsGroup[12] = doors_comboBox_wednesday;
        doorsGroup[13] = doors_comboBox_thursday;
        doorsGroup[14] = doors_comboBox_friday;
        doorsGroup[15] = doors_comboBox_saturday;
        doorsGroup[16] = doors_comboBox_sunday;
    }

    private void setGroupEnabled(boolean state, JComponent[] group) {
    
        for (JComponent component : group) {
            component.setEnabled(state);
        }
        
    }

    private void clearTimesDialogFields() {
        // Resets the times Dialog window back to default settings
        
        schedules_comboBox_openHour.setSelectedIndex(0);
        schedules_comboBox_openMinute.setSelectedIndex(0);
        schedules_comboBox_closeHour.setSelectedIndex(0);
        schedules_comboBox_closeMinute.setSelectedIndex(0);
    
    }

    private void resetScheduleFields() {

        schedules_textField_name.setText("");
        schedules_textArea_description.setText("");
        schedules_label_colorDisplay.setBackground(new Color(216,216,216));
        schedules_label_colorDisplay.setOpaque(false);
        
        DefaultTableModel timesModel = (DefaultTableModel) schedules_table_times.getModel();
        timesModel.setRowCount(0);
        
    }
    private void resetDoorFields(){
        doors_textField_name.setText("");
        doors_label_statusState.setText("");
        
doors_buttonGroup_building.clearSelection();        
doors_comboBox_monday.setSelectedIndex(0);
        doors_comboBox_tuesday.setSelectedIndex(0);
        doors_comboBox_wednesday.setSelectedIndex(0);
        doors_comboBox_thursday.setSelectedIndex(0);
        doors_comboBox_friday.setSelectedIndex(0);
        doors_comboBox_saturday.setSelectedIndex(0);
        doors_comboBox_sunday.setSelectedIndex(0);
        DefaultTableModel dfm = (DefaultTableModel)doors_table_log.getModel();
        dfm.setRowCount(0);


    }
    private void buildDoorsTable() {
        
        Object[][] data = new Object[doors.size()][5];
        String[] columnHeaders = {"Name", "Status", "Color", "Schedule", "Building"};
     
        // Get the Tables Cell renderer to change the background color of the 
        // schedule field to match the color
        
        int row = 0;
        for (String key : doors.keySet()) {
            Door door = doors.get(key);
            
            data[row][0] = door.getName();
            if(door.isStatus())
            {
                            data[row][1] = "OPEN";

            }
            else
            {
                            data[row][1] = "CLOSE";

            }
            
            Color color  = door.getToday().getColor();
            data[row][2] = String.format("%d, %d, %d",color.getRed(), color.getGreen(), color.getBlue());
            data[row][3] = door.getToday().getTimes();
            data[row][4] = door.getBuilding();
            
            row++;
            System.out.println(door.getToday().getName());

        }
        
        DefaultTableModel dfm = (DefaultTableModel)doors_table_display.getModel();
        dfm.setDataVector(data, columnHeaders);
        
        CellColorRenderer cellRenderer = new CellColorRenderer();
        doors_table_display.setDefaultRenderer(Object.class, cellRenderer);
        


    }
    private void buildLogsTable(TreeSet<LogEntry> logs) {

        if (logs == null || logs.size() == 0) {
            return;
        }
        
        Object[][] data = new Object[logs.size()][2];
        String[] columnHeaders = {"Time Stamp", "Employee"};
     
        int row = 0;
        
        for (LogEntry log : logs) {
            GregorianCalendar open = log.getTimeStamp();
            String am_pm = (open.get(Calendar.AM_PM) == 0) ? "am" : "pm";
            int hour = (open.get(Calendar.HOUR)==0)? 12 : open.get(Calendar.HOUR);
            String minute = (open.get(Calendar.MINUTE) < 10)? "0"+open.get(Calendar.MINUTE) : ""+open.get(Calendar.MINUTE);
            String opFormatted = "" + hour+ ":" + minute + " " + am_pm ; 
            data[row][0] = opFormatted;
            int id = log.getEmployeeID();
            
            String name = id + " - " + badges.get(id).getName();
            name = name.substring(1, name.length()-1);
            name = name.substring(0,8) + name.substring(9);
            //name = name.substring(8,9);
            data[row][1] = name; 
            
            
            
            row++;
            
        }
        
        DefaultTableModel dfm = (DefaultTableModel)doors_table_log.getModel();
        dfm.setDataVector(data, columnHeaders);
    
    }

    private void buildDoorComboBoxGroup() {
        
        doorComboBox = new JComboBox[7];
        doorComboBox[0] = doors_comboBox_monday;
        doorComboBox[1] = doors_comboBox_tuesday;
        doorComboBox[2] = doors_comboBox_wednesday;
        doorComboBox[3] = doors_comboBox_thursday;
        doorComboBox[4] = doors_comboBox_friday;
        doorComboBox[5] = doors_comboBox_saturday;
        doorComboBox[6] = doors_comboBox_sunday;
        
    }
    

    private void buildComboBoxes() {
    
        //build a list of shedule names from the shedules key set
        String[] scheduleNames = new String[schedules.size()];
        
        scheduleNames[0] = "NONE";
        int row = 1;
        for(String name : schedules.keySet()){
            
            if(!name.equals("NONE")){
                scheduleNames[row] = name;
                row++;
            } 
        }
        //reassign the combobox model with a new model of shedule names
        for(JComboBox comboBox : doorComboBox){
            comboBox.setModel(new DefaultComboBoxModel(scheduleNames));
        }
    }

    private String getCurrentFileLocation() {
        
        try
        {
        Scanner file = new Scanner(new File("preferences.txt"));
        return file.nextLine();
        }
        
        catch(FileNotFoundException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private void writeCurrentFileLocaitonToPreferences() {
        try{
            FileWriter writer = new FileWriter("preferences.txt");
            writer.write(currentFile);
            writer.close();
        }
        catch(IOException ex){
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
         
}
